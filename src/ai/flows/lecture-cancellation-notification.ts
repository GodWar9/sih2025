// This is an autogenerated file from running `firebase genkit:flow`.
'use server';

/**
 * @fileOverview Defines a Genkit flow to determine which students should be notified when a lecture is cancelled.
 *
 * - lectureCancellationNotification - Determines affected students and triggers notifications.
 * - LectureCancellationNotificationInput - Input type for the flow, including student list and cancellation context.
 * - LectureCancellationNotificationOutput - Output type, listing students to notify.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LectureCancellationNotificationInputSchema = z.object({
  studentList: z.array(
    z.object({
      studentId: z.string().describe('Unique identifier for the student.'),
      attendanceRate: z
        .number()
        .min(0)
        .max(1)
        .describe('The student attendance rate for this lecture.'),
      missedSessions: z
        .number()
        .min(0)
        .describe('Number of previously missed sessions.'),
    })
  ).describe('List of students enrolled in the lecture.'),
  lectureDetails: z
    .string()
    .describe('Details about the cancelled lecture, including date, time, and subject.'),
});

export type LectureCancellationNotificationInput = z.infer<
  typeof LectureCancellationNotificationInputSchema
>;

const LectureCancellationNotificationOutputSchema = z.object({
  studentsToNotify: z.array(
    z.object({
      studentId: z.string().describe('The ID of the student to notify.'),
      reason: z.string().describe('The reason for selecting this student for notification'),
    })
  ).describe('List of student IDs who should be notified.'),
});

export type LectureCancellationNotificationOutput = z.infer<
  typeof LectureCancellationNotificationOutputSchema
>;

export async function lectureCancellationNotification(
  input: LectureCancellationNotificationInput
): Promise<LectureCancellationNotificationOutput> {
  return lectureCancellationNotificationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'lectureCancellationPrompt',
  input: {
    schema: LectureCancellationNotificationInputSchema,
  },
  output: {
    schema: LectureCancellationNotificationOutputSchema,
  },
  prompt: `You are an AI assistant helping to determine which students need to be notified about a lecture cancellation.

  Given the following list of students and their attendance records, determine which students should be notified about the cancellation of the lecture.
  Only notify students who are likely to be affected by the cancellation, considering their attendance rate and missed sessions.

  Lecture Details: {{{lectureDetails}}}

  Students:{{#each studentList}}
  - Student ID: {{studentId}}, Attendance Rate: {{attendanceRate}}, Missed Sessions: {{missedSessions}}
  {{/each}}

  Output a JSON array of student IDs who should be notified. Include a brief reason (less than 10 words) for each student.
  `,
});

const lectureCancellationNotificationFlow = ai.defineFlow(
  {
    name: 'lectureCancellationNotificationFlow',
    inputSchema: LectureCancellationNotificationInputSchema,
    outputSchema: LectureCancellationNotificationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
